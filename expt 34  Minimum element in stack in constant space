#include <iostream>
#include <stack>

class MinStack {
private:
    std::stack<int> mainStack;
    std::stack<int> minStack;

public:
    void push(int value) {
        mainStack.push(value);
        if (minStack.empty() || value <= minStack.top()) {
            minStack.push(value);
        }
    }

    void pop() {
        if (mainStack.empty()) {
            std::cout << "Stack is empty." << std::endl;
            return;
        }

        int topValue = mainStack.top();
        mainStack.pop();

        if (topValue == minStack.top()) {
            minStack.pop();
        }
    }

    int top() {
        if (mainStack.empty()) {
            std::cout << "Stack is empty." << std::endl;
            return -1;
        }
        return mainStack.top();
    }

    int getMin() {
        if (minStack.empty()) {
            std::cout << "Stack is empty." << std::endl;
            return -1;
        }
        return minStack.top();
    }
};

int main() {
    MinStack stack;

    stack.push(10);
    stack.push(5);
    stack.push(8);
    stack.push(3);

    std::cout << "Top element: " << stack.top() << std::endl;
    std::cout << "Minimum element: " << stack.getMin() << std::endl;

    stack.pop();

    std::cout << "Top element: " << stack.top() << std::endl;
    std::cout << "Minimum element: " << stack.getMin() << std::endl;

    return 0;
}
